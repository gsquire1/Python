/** Cascading */
module cascading {
    /** Cascading Interface */
    interface Cascading_1_0_1 {
	/** Error codes */
	constant int ERR_NOT_AVAILABLE = 1;
	constant int ERR_NOT_SUPPORTED_ON_SLAVE = 2;

	/** Cascading type */
	enumeration Type {
	    USB_MULTI_IP,	///< USB chain; one IP per device; transparent
	    USB_SINGLE_IP_NAT	///< USB chain; single IP; NAT(port-forwarding)
	};

	/** Mapping from appl protocol id to name and transport protocol */
	structure ProtocolMapping {
	    int appProtoId;
	    string appProtoName;
	    string transportProtoName;
	};

	/**
	 * Set the cascading type.
	 *
	 * This operation is only supported on the cascading master. On slave
	 * units it will return ERR_NOT_SUPPORTED_ON_SLAVE. A cascading master
	 * is a unit with an active ethernet uplink and no active uplink on the
	 * USB-B connector.
	 *
	 * @param type - the cascading type
	 * @return 0 on success
	 * @return ERR_NOT_SUPPORTED_ON_SLAVE if this is a slave unit
	 */
	int setType(in Type type);

	/**
	 * Get the cascading type.
	 *
	 * A slave unit will return ERR_NOT_AVAILABLE when the master unit has
	 * not yet propagated the cascading type to the slaves. This behaviour
	 * is typically seen while the device is booting and network setup did
	 * not finish yet.
	 *
	 * @param type - the cascading type
	 * @return 0 on success
	 * @return ERR_NOT_AVAILABLE if not yet known
	 */
	int getType(out Type type);

	/**
	 * Get the index of this unit in the cascade.
	 *
	 * Index 0 means this is the master unit. A cascading master is a unit
	 * with an active ethernet uplink and no active uplink on the USB-B
	 * connector.
	 *
	 * @param idx - the index of this unit in the cascade
	 */
	void getIndex(out int idx);

	/**
	 * Get the IPv4 address of the master.
	 *
	 * If the address is not available an empty string is returned.
	 *
	 * @param masterIpAddress - the IPv4 address of the master
	 */
	void getMasterIpAddress(out string masterIpAddress);

	/**
	 * Get the IPv6 address of the master.
	 *
	 * If the address is not available an empty string is returned.
	 *
	 * @param masterIpV6Address - the IPv6 address of the master
	 */
	void getMasterIpV6Address(out string masterIpV6Address);

	/**
	 * Get the application protocol id -> name/transport-proto mappings.
	 *
	 * @param mappings - the protocol id -> name/transport-proto mappings
	 */
	void getProtocolMappings(out vector<ProtocolMapping> mappings);
    };
}
